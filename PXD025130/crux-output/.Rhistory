setwd("~/Downloads/super_percolator_paper_3/PXD025130/crux-output")
#libraries
library(tidyverse)
library(caret)
library(e1071)
#functions
TDC_flex_c = function(decoy_wins, target_wins, BC1 = 1, c = 1/2, lambda = 1/2){
#give in order of best score first to worst score last
nTD <- cumsum(target_wins)
nDD <- cumsum(decoy_wins)
fdps <- (pmin(1, ((BC1 + nDD)/ nTD) * (c / (1-lambda)))) #nDD, nTD have same length
qvals <- rev(cummin(rev(fdps)))
return(qvals)
}
peptide_level = function(narrow_file, open_file, peptide_list) { #just for static modifications
narrow_df = read_delim(narrow_file, na = character())
open_df = read_delim(open_file, na = character())
narrow_df$n_o = 1
open_df$n_o = 0
df_all = rbind(narrow_df, open_df)
df_all = df_all[sample(nrow(df_all)), ]
df_all = df_all[order(-df_all$TailorScore), ]
df_all$rank = unlist(lapply(df_all$SpecId, function(x) substr(x, start = nchar(x), nchar(x))))
df_all = df_all[df_all$rank <= 2, ]
df_all$rank[df_all$rank == 1] = 0 #transforming into a binary
df_all$rank[df_all$rank == 2] = 1
peptide_list_df = read_delim(peptide_list, na = character())
original_target = df_all$Peptide
original_target = unlist(lapply(original_target, function(x) substr(x, start = 3, nchar(x) - 2)))
original_target[df_all$Label == -1] = peptide_list_df$target[match(df_all$Peptide[df_all$Label == -1], peptide_list_df$decoy)]
df_all = df_all[!duplicated(original_target), ]
df_all = df_all %>% select(-enzInt)
return(df_all)
}
do_iterative_svm = function(df_all, train_prob = 0.5, Cs = c(0.1, 1, 10), total_iter = 10, kernel = 'linear', alpha = 0.01) {
#create train dataframe
train_decoys_indx = sample(c(T, F), size = sum(df_all$Label == -1), replace = T, prob = c(train_prob, 1 - train_prob))
train_decoys = df_all[which(df_all$Label == -1)[train_decoys_indx], ]
train_targets = df_all[-which(df_all$Label == -1)[train_decoys_indx], ]
train_targets$Label == 1
train_df = rbind(train_decoys, train_targets)
#real dataframe
real_df = df_all[-which(df_all$Label == -1)[train_decoys_indx], ]
#Preprocess dataframe
SVM_train_features = train_df %>% select(-SpecId, -Label, -ScanNr, -Peptide, -Proteins, -target)
sds = apply(SVM_train_features, 2, sd)
SVM_train_features = SVM_train_features[, abs(sds) > 1e-10]
SVM_train_labels = SVM_train_data$Label
#scale non-binary features
SVM_train_features[,which(!names(SVM_train_features) %in% c("Charge1", "Charge2", "Charge3", "Charge4", "Charge5", "enzN", "enzC", "rank"))] = scale(SVM_train_features[,which(!names(SVM_train_features) %in% c("Charge1", "Charge2", "Charge3", "Charge4", "Charge5", "enzN", "enzC", "rank"))])
#getting initial positive and negative set
indxs = order(-SVM_train_features$TailorScore)
SVM_train_features = SVM_train_features[indxs,]
SVM_train_labels = SVM_train_labels[indxs]
q_vals = TDC_flex_c(SVM_train_labels == -1, SVM_train_labels == 1, c = 2/3, lambda = 2/3)
positive_set_indxs = (SVM_train_labels == 1) & (q_vals <= FDR_threshold)
negative_set_indxs = (SVM_train_labels == -1)
SVM_train_features_iter = SVM_train_features[positive_set_indxs | negative_set_indxs, ]
SVM_train_labels_iter = SVM_train_labels[positive_set_indxs | negative_set_indxs]
Cs_pos = Cs_neg = Cs
power_finals = double()
max_powers = double()
for (iter in 1:total_iter) {
#initializing C_pairs and count
print(paste('iter:', iter))
C_pairs = data.frame(Cs_pos = double(), Cs_neg = double())
count = 1
powers = double()
for (i in 1:length(Cs_neg)) {
C_neg = Cs_neg[i]
for (j in 1:length(Cs_pos)) {
C_pos = Cs_pos[j]
print('C_neg/C_pos')
print(c(C_neg, C_pos))
#train SVM
cost_weight = c(C_pos, C_neg)
names(cost_weight) = c(1,-1)
model = svm(factor(SVM_train_labels_iter) ~.,
data = SVM_train_features_iter,
type = 'C-classification',
kernel = kernel,
class.weights = cost_weight,
scale = F)
#determine ordering from trained SVM
new_scores = predict(model, SVM_train_features, decision.values = TRUE)
new_scores = as.vector(attr(new_scores, 'decision.values'))
#Do TDC
new_indxs = order(-new_scores)
SVM_labels_new = SVM_train_labels[new_indxs]
q_vals = TDC_flex_c(SVM_labels_new == -1, SVM_labels_new == 1)
power = sum(q_vals <= FDR_threshold & SVM_labels_new == 1)
powers = c(powers, power)
print(paste('power', power))
C_pairs[count, ] = cost_weight
count = count + 1
print('yay')
}
}
power_indx = which.max(powers)
print('max_power')
print(max(powers))
max_powers = c(max_powers, max(powers))
#redoing the SVM model that yielded the highest power
#and reordering according to this model
C_max = c(C_pairs[power_indx, 1,], C_pairs[power_indx, 2])
names(C_max) = c(1,-1)
model = svm(factor(SVM_train_labels_iter) ~.,
data = SVM_train_features_iter,
type = 'C-classification',
kernel = kernel,
class.weights = C_max,
scale = F)
new_scores = predict(model, SVM_train_features, decision.values = TRUE)
new_scores = as.vector(attr(new_scores, 'decision.values'))
best_indxs = order(-new_scores)
SVM_train_features = SVM_train_features[best_indxs,]
SVM_train_labels = SVM_train_labels[best_indxs]
q_vals = TDC_flex_c(SVM_train_labels == -1, SVM_train_labels == 1)
positive_set_indxs = (SVM_train_labels == 1) & (q_vals <= FDR_threshold)
negative_set_indxs = (SVM_train_labels == -1)
#the new positive and negative training set
SVM_train_features_iter = SVM_train_features[positive_set_indxs | negative_set_indxs, ]
SVM_train_labels_iter = SVM_train_labels[positive_set_indxs | negative_set_indxs]
#get actual power if we were to stop here
real_labels = real_df$Label
real_df_test = real_df %>% select(-SpecId, -Label, -ScanNr, -Peptide, -Proteins, -target)
sds = apply(real_df_test, 2, sd)
real_df_test = real_df_test[, abs(sds) > 1e-10]
real_df_test[,which(!names(real_df_test) %in% c("Charge1", "Charge2", "Charge3", "Charge4", "Charge5", "enzN", "enzC", "rank"))] = scale(real_df_test[,which(!names(real_df_test) %in% c("Charge1", "Charge2", "Charge3", "Charge4", "Charge5", "enzN", "enzC", "rank"))])
new_scores = predict(model, real_df_test, decision.values = TRUE)
new_scores = as.vector(attr(new_scores, 'decision.values'))
new_labels = real_labels[order(-new_scores)]
q_val = TDC_flex_c(new_labels == -1, new_labels == 1)
power_final = sum(q_val <= 0.01 & new_labels == 1)
power_finals = c(power_finals, power_final)
}
results = list(max_powers, power_finals)
names(results) = c('max_powers', 'power_finals')
return(results)
}
narrow_file = 'narrow_filtered.make-pin.pin'
open_file = 'open_filtered.make-pin.pin'
peptide_list = 'tide-index.peptides.txt'
narrow_df = read_delim(narrow_file, na = character())
open_df = read_delim(open_file, na = character())
narrow_df$n_o = 1
open_df$n_o = 0
problems(narrow_df)
head(narrow_df$Proteins)
